<?php
/**
 * @file
 * Support for Facebook Connect features
 * 
 * Note that Facebook connect will work properly only with themes that are
 * Facebook Connect aware.
 */

// Drupal variables
define('FB_CONNECT_VAR_PRIMARY', 'fb_connect_primary_label');

define('FB_CONNECT_VAR_THEME_USERNAME_1', 'fb_connect_theme_username_1');
define('FB_CONNECT_VAR_THEME_USERNAME_2', 'fb_connect_theme_username_2');
define('FB_CONNECT_VAR_THEME_USERPIC_1', 'fb_connect_theme_userpic_1');
define('FB_CONNECT_VAR_THEME_USERPIC_2', 'fb_connect_theme_userpic_2');


/**
 * Implementation of hook_menu().
 */
function fb_connect_menu() {
  $items = array();

  // Admin pages
  $items[FB_PATH_ADMIN . '/fb_connect'] = array(
    'title' => 'Facebook Connect',
    'description' => 'Configure Facebook Connect',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fb_connect_admin_settings'),
    'access arguments' => array(FB_PERM_ADMINISTER),
    'file' => 'fb_connect.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
    

  return $items;
}


/**
 * Prepare for fbConnect use.  Because a single Drupal might support
 * multiple apps, we don't know in advance which is the fbConnect app.
 */
function fb_connect_app_init($fb_app) {
  if (isset($GLOBALS['_fb_app']) &&
      $GLOBALS['_fb_app']->apikey != $fb_app->apikey) {
    // If we're in an iframe, only support connect for the iframe app.
    return;
  }
  
  if ($fb = fb_api_init($fb_app)) {
    $fbu = $fb->getUser();
    if ($fbu &&
        (!isset($GLOBALS['_fb_app']) || $GLOBALS['_fb_app']->apikey != $fb_app->apikey)) {
      // The user has authorized the app and we now know something about them.  Use a hook to trigger the actions of other modules.
      fb_invoke(FB_OP_APP_IS_AUTHORIZED, array(
                  'fbu' => $fbu,
                  'fb_app' => $fb_app,
                  'fb' => $fb));
    }
    
    // Remember which app we've initialized.
    _fb_connect_set_app($fb_app);
    
  }
  return $fb;
}

/**
 * Helper function for other modules to know page is connected.
 * 
 * Note that this may return data on connect pages and in iframe apps
 * (depending on how iframe is configured).
 */
function fb_connect_get_app() {
  return _fb_connect_set_app();
}
function _fb_connect_set_app($fb_app = NULL) {
  static $cache;
  if (isset($fb_app)) {
    $cache = $fb_app;
  }
  return $cache;
}

/**
 * Which apps are fbConnect enabled?
 */
function fb_connect_enabled_apps() {
  // We do a bit of work for each enabled app, so really we want to restrict this list to only apps which have been "turned on".
  // But for now we're lazy and just get the list of all apps.
  $apps = fb_get_all_apps();
  return $apps;
}

/**
 * Implementation of hook_fb().
 */
function fb_connect_fb($op, $data, &$return) {
  //dpm(func_get_args(), "fb_connect_fb($op)");
  if ($op == FB_OP_CURRENT_APP && !$return && !fb_is_canvas()) {
    // This will cause fb.module to set the global $_fb when user is logged in via fbConnect.
    if ($apikey = variable_get('fb_apikey', NULL)) {
      // Honor $conf['fb_apikey'] if set in settings.php.
      $return = fb_get_app(array('apikey' => $apikey));
    }
    elseif ($label = variable_get(FB_CONNECT_VAR_PRIMARY, NULL)) {
      $return = fb_get_app(array('label' => $label));
    }
  }
  elseif ($op == FB_OP_POST_INIT) {
    if (!fb_is_canvas()) {
      // Init Facebook javascript for primary app
      _fb_connect_add_js();
    }
    
    // Include our admin hooks.
    if (fb_is_fb_admin_page()) {
      module_load_include('inc', 'fb_connect', 'fb_connect.admin');
    }
  }
}

/**
 * This wrapper function around drupal_add_js() ensures that our
 * settings are added once and only once when needed.
 */
function _fb_connect_add_js() {
  static $just_once;
  if (!isset($just_once)) {
    drupal_add_js(array(
                    'fb_connect' => array(
                      'front_url' => url('<front>'),
                      'fbu' => fb_facebook_user(),
                      'uid' => $uid,
                    ),
                  ), 'setting');
    drupal_add_js(drupal_get_path('module', 'fb_connect') . '/fb_connect.js');
    $just_once = TRUE;
  }
}

/**
 * Here we attempt to log the user out of facebook connect, not just Drupal.
 * If we fail, the user will be reconnected right away, because
 * connect cookies are still in place.
 */
function fb_connect_exit($url = NULL) {
  if (isset($GLOBALS['fb_connect_logging_out'])) {
    global $_fb;
    session_write_close(); // drupal_goto calls this, so why not us?
    if (!isset($url))
      $url = url('<front>', NULL, NULL, TRUE);
    $_fb->logout($url);
  }
}

/**
 * Allows other modules to specify which Facebook Connect features are
 * required.  This will affect how the FB_RequireFeatures javascript method is
 * called.
 */
function fb_connect_require_feature($feature = NULL, $fb_app = NULL) {
  if ($feature && !isset($fb_app) && isset($GLOBALS['_fb_app']))
    $fb_app = $GLOBALS['_fb_app'];
  
  // some features may apply without an app, but for now let's enforce that an app is required.
  if ($feature && !isset($fb_app))
    return;
  
  static $features;
  if (!$features) {
    _fb_connect_add_js(); // include our javascript.
    $features = array();
  }
  if ($fb_app && !isset($features[$fb_app->apikey]))
    $features[$fb_app->apikey] = array(
      'fb_app' => $fb_app,
      'features' => array());
  if ($feature)
    $features[$fb_app->apikey]['features'][$feature] = $feature;
  return $features;
}

/**
 * Add an option when initializing facebook's javascript api.
 */
function fb_connect_init_optionXXX($option = NULL, $value = NULL, $fb_app = NULL) {
  if ($option && !isset($fb_app))
    $fb_app = $GLOBALS['_fb_app'];
  if ($option && !$fb_app)
    return;
  
  static $options;
  if (!$options)
    $options = array();
  if ($fb_app && !isset($options[$fb_app->apikey])) {
    $options[$fb_app->apikey] = array();
  }
  
  if ($option)
    $options[$fb_app->apikey][$option] = $value;
  return $options;
}

/**
 * Add javascript to a facebook connect page.
 *
 * Use this to add calls to facebook JS,
 * http://wiki.developers.facebook.com/index.php/JS_API_Index.
 * 
 * We use Drupal's cache to store the javascript until it is rendered
 * to a page.  This approach is analogous to drupal_set_message
 * storing data temporarily in the session.  We use cache instead of
 * session, because the session is not shared between Facebook's event
 * callbacks and regular page requests.
 *
 */
function fb_connect_init_js($js = NULL) {
  $fbu = fb_facebook_user();
  $fb_app = $GLOBALS['_fb_app'];
  $cid = 'fb_connect_init_js_' . $fb_app->apikey . '_' . $fbu;
  $cache = cache_get($cid, 'cache');
  if (!isset($cache->data)) {
    $cache = new stdClass();
    $cache->data = array();
  }
  
  if ($js) {
    $cache->data[] = $js;
    cache_set($cid, $cache->data, 'cache', time() + 60000); // Update cache
  }
  elseif ($js === NULL) {
    cache_clear_all($cid, 'cache');
  }
  
  return $cache->data;
}


/**
 * Convenience method to get an apps connect URL.
 *
 */
function fb_connect_get_connect_url($fb_app) {
  // absolute URL with no rewriting applied
  global $base_url;

  return $base_url . '/';
  
}



function _fb_connect_block_login_defaults() {
  return array('anon_not_connected' => array(
                 'title' => t('Facebook Connect'),
                 'body' => t('<fb:login-button perms="!perms" onlogin="FB_JS.reload();" v="2"><fb:intl>Connect with Facebook</fb:intl></fb:login-button>'),
               ),
               'user_not_connected' => array(
                 'title' => t('Facebook Connect'),
                 'body' => t('<fb:login-button perms="!perms" onlogin="FB_JS.reload();" v="2"><fb:intl>Connect with Facebook</fb:intl></fb:login-button>'),
               ),
               'connected' => array(
                 'title' => t('Facebook Connect'),
                 'body' => "<fb:profile-pic uid=!fbu></fb:profile-pic><!--<fb:login-button autologoutlink=true></fb:login-button>-->",
               ),
  );
}

/**
 * Implementation of hook_block.
 */
function fb_connect_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $items = array();
    foreach (fb_connect_enabled_apps() as $fb_app) {
      $d = 'login_' . $fb_app->label;
      $items[$d] = array(
        'info' => t('Facebook Connect Login to !app',
                    array('!app' => $fb_app->title)),
      );
    }
    return $items;
  }
  elseif ($op == 'configure') {
    $orig_defaults = _fb_connect_block_login_defaults();
    $defaults = variable_get('fb_connect_block_' . $delta, $orig_defaults);
    $form['config'] = array('#tree' => TRUE);
    // Settings for each user status that we can detect.
    foreach (array('anon_not_connected', 'user_not_connected', 'connected') as $key) {
      $form['config'][$key] = array(
        '#type' => 'fieldset',
        // title and description below
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );
      $form['config'][$key]['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Default title'),
        //'#description' => t('Default title.'),
        '#default_value' => $defaults[$key]['title'],
      );
      $form['config'][$key]['body'] = array(
        '#type' => 'textarea',
        '#title' => t('Body'),
        //'#description' => t('Block body'),
        '#default_value' => $defaults[$key]['body'],
      );
    }
    $form['config']['anon_not_connected']['#title'] = t('Anonymous user, not connected');
    $form['config']['anon_not_connected']['#description'] = t('Settings when local user is Anonymous, and not connected to Facebook.  Typically a new account will be created when the user clicks the connect button.');
    $form['config']['anon_not_connected']['body']['#description'] = t('Suggestion: %default .', array('%default' => $orig_defaults['anon_not_connected']['body']));
    $form['config']['user_not_connected']['#title'] = t('Registered user, not connected');
    $form['config']['user_not_connected']['#description'] = t('Settings when local user is registered, and not connected to Facebook.  Typically the facebook id will be linked to the local id after the user clicks the connect button.');
    $form['config']['user_not_connected']['body']['#description'] = t('Suggestion: %default .', array('%default' => $orig_defaults['user_not_connected']['body']));
    $form['config']['connected']['#title'] = t('Connected user');
    $form['config']['connected']['#description'] = t('Settings when local user is connected to Facebook.  You may render facebook\'s logout button, and/or information about the user.  Consider using <a target="_blank" href="!xfbml_url">XFBML</a> such as &lt;fb:name uid=!fbu&gt;&lt;/fb:name&gt; or &lt;fb:profile-pic uid=!fbu&gt;&lt;/fb:profile-pic&gt;', array('xfbml_url' => 'http://wiki.developers.facebook.com/index.php/XFBML'));
    $form['config']['connected']['body']['#description'] .= t('Note that <strong>!fbu</strong> will be replaced with the user\'s facebook id.<br/>Suggestion: %default .', array('%default' => $orig_defaults['connected']['body']));

    $form['config']['format'] = filter_form($defaults['format']);
    $form['config']['format']['#description'] .= t('<p><strong>Be sure to select a format which allows XFBML tags!</strong> (That is, use <em>Full HTML</em> or <em>PHP code</em>, rather than  <em>Filtered HTML</em>.)</p><p>Format selected will apply to all body fields above.</p>');
    $form['config']['format']['#collapsed'] = FALSE;

    return $form;
  }
  elseif ($op == 'save') {
    $edit['config']['format'] = $edit['format'];
    variable_set('fb_connect_block_' . $delta, $edit['config']);
  }
  elseif ($op == 'view' && !fb_is_canvas()) {
    if (strpos($delta, 'login_') === 0) {
      // Login block
      $label = substr($delta, 6); // length of 'login_'
      $fb_app = fb_get_app(array('label' => $label));
      if ($fb = fb_connect_app_init($fb_app)) {
        $fbu = $fb->getUser();

        _fb_connect_add_js();
        
        $base = drupal_get_path('module', 'fb_connect');
        
        $defaults = variable_get('fb_connect_block_' . $delta, _fb_connect_block_login_defaults());
        if ($fbu) {
          $subject = $defaults['connected']['title'];
          $content = $defaults['connected']['body'];
          // substitute %fbu
          $content = str_replace('!fbu', $fbu, $content);
        } 
        elseif ($GLOBALS['user']->uid > 1) {
          $subject = $defaults['user_not_connected']['title'];
          $content = $defaults['user_not_connected']['body'];
        } 
        elseif ($GLOBALS['user']->uid == 1) {
          $subject = $defaults['user_not_connected']['title'];
          $content = '<em>' . t('Facebook Connect login disabled for user #1.') . '</em>';
        } 
        else {
          $subject = $defaults['anon_not_connected']['title'];
          $content = $defaults['anon_not_connected']['body'];
        }

        // substitute perms
        $perms = array();
        drupal_alter('fb_required_perms', $perms);
        $content = str_replace('!perms', implode(',', $perms), $content);
        
        // If user has changed defaults, run filter
        if (isset($defaults['format'])) {
          $subject = check_plain($subject);
          $content = check_markup($content, $defaults['format'], FALSE);
        }
        
        $block = array(
          'subject' => $subject,
          'content' => $content,
        );
        return $block;
      }
    }
  }
}


function fb_connect_form_alter(&$form, &$form_state, $form_id) {
  // Add our settings to the fb_app edit form.
  if (isset($form['fb_app_data'])) {
    $fb_app = $form['#fb_app'];
    $fb_app_data = fb_get_app_data($fb_app);
    $fb_connect_data = $fb_app_data['fb_connect'];
    
    $form['fb_app_data']['fb_connect'] = array(
      '#type' => 'fieldset',
      '#title' => 'Facebook Connect',
      '#tree' => TRUE,
      '#collapsible' => TRUE,
      '#collapsed' => $node->label ? TRUE : FALSE,
    );
    
    // "Primary" will be initialized on every non-canvas page.
    $primary_label = variable_get(FB_CONNECT_VAR_PRIMARY, NULL);
    $form['fb_app_data']['fb_connect']['primary'] = array(
      '#type' => 'checkbox',
      '#title' => t('Primary'),
      '#description' => t('Initialize fbConnect javascript on all (non-canvas) pages.  If this site supports multiple Facebook Apps, this may be checked for at most one.'),
      '#default_value' => isset($fb_app->label) && ($primary_label == $fb_app->label),
    );
    if (($primary_label) && ($primary_label != $fb_app->label)) {
      $form['fb_app_data']['fb_connect']['primary']['#description'] .= '<br/>' . 
        t('Note that checking this will replace %app as the primary Facebook Connect app.', array('%app' => $primary_label));
    }
    $form['#submit'][] = 'fb_connect_app_submit';
  }  
}


function fb_connect_app_submit($form, &$form_state) {
  $values = $form_state['values'];
  $label = $values['label'];
  $data = $values['fb_app_data']['fb_connect'];
  if ($data['primary']) {
    variable_set(FB_CONNECT_VAR_PRIMARY, $label);
    drupal_set_message(t('%label is the primary Facebook Connect application.', array('%label' => $label)));
  }
  elseif ($label == variable_get(FB_CONNECT_VAR_PRIMARY, NULL)) {
    // This app was the primary one, but the user has unchecked it.
    variable_set(FB_CONNECT_VAR_PRIMARY, NULL);    
  }
}


/**
 * Implementation of hook_theme_registry_alter().
 *
 * Override theme functions for things that can be displayed using
 * XFBML.  Currently overriding username and user_picture.  We rename
 * the original entries, as we will use them for users without
 * javascript enabled.
 *
 * This hook is not well documented.  Who knows what its supposed to
 * return?  No doubt this will need updating with each new version of
 * Drupal.
 */
function fb_connect_theme_registry_alter(&$theme_registry) {
  // Ideally, we'd do this only on themes which will certainly be used for facebook connect pages.
  if (variable_get(FB_CONNECT_VAR_THEME_USERNAME_2, TRUE) ||
      (variable_get(FB_CONNECT_VAR_THEME_USERNAME_1, TRUE) &&
       $theme_registry['username']['type'] == 'module')) {
    // Re-register the original theme function under a new name.
    $theme_registry['fb_connect_username_orig'] = $theme_registry['username'];
    // Override theme username
    $theme_registry['username'] = array(
      'arguments' => array('object' => NULL),
      'function' => 'fb_connect_theme_username_override',
      'type' => 'module',
    );
  }

  if (variable_get(FB_CONNECT_VAR_THEME_USERPIC_2, TRUE) ||
      (variable_get(FB_CONNECT_VAR_THEME_USERPIC_1, TRUE) &&
       $theme_registry['user_picture']['type'] == 'module')) {
    // Re-register the original theme function under a new name.
    $theme_registry['fb_connect_user_picture_orig'] = $theme_registry['user_picture'];
    // Override theme username
    $theme_registry['user_picture'] = array(
      'arguments' => array('account' => NULL),
      'function' => 'fb_connect_theme_user_picture_override',
      'type' => 'module',
    );
  }
}

/**
 * Our replacement for theme('user_picture', ...)
 */
function fb_connect_theme_user_picture_override($account) {
  // Markup without fb_connect.
  $orig = theme('fb_connect_user_picture_orig', $account);

  // Respect Drupal's profile pic, if uploaded.
  if (isset($account->picture) && $account->picture) {
    return $orig;
  }

  if ($fbu = fb_get_object_fbu($account)) {
    $output = theme('fb_user_picture', $fbu, $account, $orig);
  }
  else {
    $output = $orig;
  }
  return $output;
}

/**
 * Our replacement for theme('username', ...)
 */
function fb_connect_theme_username_override($object) {
  $orig = theme('fb_connect_username_orig', $object);

  if ($fbu = fb_get_object_fbu($object)) {
    // Theme the username with XFBML, using original username as backup.
    return theme('fb_username', $fbu, $object, $orig);
  }
  else {
    return $orig;
  }
}



